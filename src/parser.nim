import std/[
  asyncdispatch, httpclient, net,
  htmlparser, xmltree, strtabs,
  uri, options, strformat,
  algorithm, sequtils, strutils,
  times
]
import utils, typedefs, helpers, constants

proc newSite*(): Site = Site()

proc loadPage*(site: Site): Future[string] {.async.} =
  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∞–π—Ç–∞
  var client = newAsyncHttpClient(sslContext=newContext(verifyMode=CVerifyNone))
  debug "[loadPage]", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
  let content = await client.getContent(SCHELDUE_URL)
  debug "[loadPage]", "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"
  site.content = some content
  return content

proc getFaculties*(site: Site): seq[SelectOption] =
  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
  debug "[getFaculties]", "–ü–∞—Ä—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
  let html = parseHtml(site.content.get)
  result = @[]
  site.faculties.setLen(0)
  for select in html.findAll("select"):
    if select.attrs.hasKey("id") and select.attrs["id"] == "fak_select":
      for x in select.items:
        if x.kind == xnElement:
          let facult = (id: x.attr("value"), display: x.innerText)
          debug "[getFaculties]", "–ù–∞–π–¥–µ–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", $facult
          result.add(facult)
          site.faculties.add(facult)

proc getGroups*(site: Site): Future[seq[Group]] {.async.} =
  # –ü–æ–ª—É—á–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø
  var client = newAsyncHttpClient(sslContext=newContext(verifyMode=CVerifyNone))

  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
  site.groups.setLen(0)

  # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º
  for facult in site.faculties:
    debug "[getGroups]", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞", $facult
    var
      formsRawHtml = await client.getContent(parseUri(SCHELDUE_DATA_URL) ? {
        "type": "form",
        "kaf": KAF_QUERY,
        "fak": facult.id
      })
      formsHtml = parseHtml(formsRawHtml)
      forms = newSeq[SelectOption]()

    # –ü–∞—Ä—Å —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è
    for formElement in formsHtml.findAll("option"):
      let form = (formElement.attr("value"), formElement.innerText)
      debug "[getGroups]", fmt"–ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {$form} ({$facult})"
      forms.add(form)

    # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ñ–æ—Ä–º–∞–º –æ–±—É—á–µ–Ω–∏—è
    for form in forms.items:
      debug "[getGroups]", fmt"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {$facult} ({$form})"
      var
        coursesRawHtml = await client.getContent(parseUri(SCHELDUE_DATA_URL) ? {
          "type": "kurse",
          "kaf": KAF_QUERY,
          "fak": facult.id,
          "form": form[0]
        })
        coursesHtml = parseHtml(coursesRawHtml)
        courses = newSeq[SelectOption]()

      # –ü–∞—Ä—Å –∫—É—Ä—Å–æ–≤ —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
      for courseElement in coursesHtml.findAll("option"):
        let course = (courseElement.attr("value"), courseElement.innerText)
        debug "[getGroups]", fmt"–ù–∞–π–¥–µ–Ω –∫—É—Ä—Å: {$course} ({$facult}, {$form})"
        courses.add(course)

      # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫—É—Ä—Å–∞–º
      for course in courses.items:
        debug "[getGroups]", fmt"–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø ({$course}, {$facult}, {$form})"
        let
          groupsRawHtml = await client.getContent(parseUri(SCHELDUE_DATA_URL) ? {
            "type": "group_class",
            "kaf": KAF_QUERY,
            "fak": facult.id,
            "form": form[0],
            "kurse": course[0]
          })
          groupsHtml = parseHtml(groupsRawHtml)

        # –ü–∞—Ä—Å –≥—Ä—É–ø–ø –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        for groupElement in groupsHtml.findAll("option"):
          let group = Group(
            site: site,
            id: groupElement.attr("value"),
            display: groupElement.innerText,
            course: parseCourse(course[0]),
            form: parseForm(form[0]),
            faculty: parseFaculty(facult.id)
          )
          debug "[getGroups]", "–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞", $group
          site.groups.add(group)

  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–ø–ø –ø–æ –∫—É—Ä—Å–∞–º/–Ω–æ–º–µ—Ä–∞–º
  debug "[getGroups]", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–ø–ø –ø–æ –∫—É—Ä—Å–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º"
  site.groups.sort do (x, y: Group) -> int:
    result = cmp(x.course, y.course)
    if result == 0:
      result = cmp(x.id, y.id)

  #[ 
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø
    –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—á–µ–º—É-—Ç–æ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≥—Ä—É–ø–ø—ã, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫—É—Ä—Å–∞—Ö.
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫—É—Ä—Å–∞
  ]#
  debug "[getGroups]", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø"
  site.groups = site.groups.filter do (x: Group) -> bool:
    if x.id == INVALID_GROUP_ID: # ???
      debug "[getGroups]", "omgomgüò± its fkin AUDITORIYA group, group of my dreams üòçü§©‚ô•"
      return false # üëé btw
    var simGroups = site.groups.filter do (y: Group) -> bool: result = y.id == x.id
    if simGroups.len == 1:
      result = true
    else:
      debug "[getGroups]", "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–ø–ø", $simGroups
      simGroups.sort do (y, z: Group) -> int: result = cmp(y.course, z.course)
      return simGroups[0] != x
  return site.groups

proc getWeeks*(group: Group): Future[seq[SelectOption]] {.async.} =
  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã
  var client = newAsyncHttpClient(sslContext=newContext(verifyMode=CVerifyNone))
  debug "[getWeeks]", "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã", $group
  let
    weeksRawHtml = await client.getContent(parseUri(SCHELDUE_DATA_URL) ? {
      "type": "date",
      "fak": %group.faculty,
      "kaf": KAF_QUERY,
      "form": %group.form,
      "kurse": %group.course,
      "group_class": group.id
    })
    weeksHtml = parseHtml(weeksRawHtml)

  group.weeks.setLen(0)

  if (weeksRawHtml.len == 1):
    debug "[getWeeks]", "–ù–µ –Ω–∞—à–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è", $group
    group.weeks = @[]
    return group.weeks

  for weekElement in weeksHtml.findAll("option"):
    group.weeks.add((weekElement.attr("value"), weekElement.innerText))

  debug "[getWeeks]", "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã", $group, $group.weeks

  return group.weeks

proc getScheldue*(group: Group, week: SelectOption): Future[seq[ScheldueDay]] {.async.} =
  var client = newAsyncHttpClient(sslContext=newContext(verifyMode=CVerifyNone))
  debug "[getScheldue]", fmt"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {$group} –¥–ª—è {$week}"
  let
    sheldueRawHtml = await client.getContent(parseUri(SCHELDUE_BASE) / %group.form / %group.faculty / %group.course / group.id / week.id)
    scheldueHtml = parseHtml(sheldueRawHtml)
  var days = newSeq[ScheldueDay]()

  for divElement in scheldueHtml.findAll("div"):
    if divElement.attr("class") == "rp-ras": # –±–ª–æ–∫ –Ω–µ–¥–µ–ª–∏
      for dayElem in divElement.items: # –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º
        if dayElem.kind == xnElement:
          let dayElements = dayElem.findAll("div").filter do (x: XmlNode) -> bool:
            x.kind == xnElement

          let
            dateString = dayElements[0].innerText
            dayString = dayElements[1].innerText
            lessonsElements = dayElements[2].findAll("div")
            scheldueDayMonth = parseMonth(dateString.split(" ")[1])
            dayTime = dateTime(
              now().year + (if scheldueDayMonth == mJan and now().month == mDec: 1 else: 0),
              scheldueDayMonth,
              parseInt(dateString.split(" ")[0]),
              3, 0, 0,
              zone = utcMinsk
            )

          var day = ScheldueDay(
            date: dayTime,
            displayDate: dateString,
            day: parseDay(dayString),
            lessons: newSeq[Lesson]()
          )

          debug "[getScheldue]", "–ü–∞—Ä—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è " & dateString
          
          for lessonElement in lessonsElements.items: # –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º
            let lessonElements = lessonElement.findAll("div")

            if (lessonElements.filter do (x: XmlNode) -> bool:
              x.attr("class") == "rp-r-aud").len == 0: continue # –Ω–µ—Ç—É —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π = –Ω–µ—Ç—É –∑–∞–Ω—è—Ç–∏—è

            let
              timeString = lessonElements[0].innerText
              lessonStrings = lessonElements[1].child("div").innerText.split("\n")
              classroomString = lessonElements[3].innerText

              # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 5 - –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –¥–≤—É—Ö –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å –¥–≤—É–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ (–ª–∞–±–∞ –∫–æ—Ä–æ—á–µ), –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–Ω—è—Ç–∏—è –µ—Å—Ç—å –ø—É–Ω–∫—Ç "N. "
              lessonName = if lessonStrings.len == 5: lessonStrings[0][3..^1] else: lessonStrings[0]
              teachers = parseTeachers($lessonElements[1].child("div"))
              classrooms = parseClassrooms(classroomString)
              lessonTime = parseTime(timeString)

            var lessonDateTime = dayTime
            lessonDateTime += initDuration(hours = ($%lessonTime).hours, minutes = ($%lessonTime).minutes)

            var lesson = Lesson(
                date: lessonDateTime,
                lessonTime: lessonTime,
                name: lessonName,
                lType: parseLessonType(lessonStrings[1])
              )

            if teachers.len != 0:
              lesson.teachers = teachers

            if classrooms.len != 0:
              lesson.classrooms = classrooms

            day.lessons.add(lesson)
          if day.lessons.len != 0: days.add(day)

  return days