import mitsopkg/[parser, typedefs, helpers]

when not isMainModule:
  export parser, typedefs, helpers
else:
  import asyncdispatch, os, strutils, options, tables, sequtils, unicode, re
  import telebot, redis
  import database

  proc main() {.async.} =
    let
      bot = newTeleBot(getEnv("BOT_TOKEN"))
      site = newSite()
      redisClient = await openAsync(
        getEnv("DB_HOST"),
        parseInt(getEnv("DB_PORT")).Port
      )
      keyboards = {
        usAskingGroup: ReplyKeyboardMarkup(
          keyboard: @[]
        ),
        usChoosingGroup: ReplyKeyboardMarkup(
          keyboard: @[
            @[KeyboardButton(text: "–û—Ç–º–µ–Ω–∞")]
          ],
          resizeKeyboard: some true
        ),  
        usMainMenu: ReplyKeyboardMarkup(
          keyboard: @[
            @[
              KeyboardButton(text: "–°–µ–≥–æ–¥–Ω—è"),
              KeyboardButton(text: "–ó–∞–≤—Ç—Ä–∞"),
              KeyboardButton(text: "–ù–µ–¥–µ–ª—è")
            ],
            @[
              KeyboardButton(text: "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
            ]
          ],
          resizeKeyboard: some true
        )
      }.toTable

    echo "Parsing site"
    discard await site.init()
    echo "Done"

    if getEnv("DB_AUTH").len != 0:
      if getEnv("DB_USER").len != 0:
        await redisClient.auth(getEnv("DB_USER"), getEnv("DB_AUTH"))
      else:
        await redisClient.auth(getEnv("DB_AUTH"))

    proc startCommand(b: Telebot, c: Command): Future[bool] {.async, gcsafe.} =
      let uExists = await redisClient.stateExists(c.message.chat.id)
      if not uExists:
        await redisClient.setState(c.message.chat.id, usAskingGroup)
        discard await b.sendMessage(c.message.chat.id, "üçâ –ü—Ä–∏–≤–µ—Ç, —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n–¢–æ–ª—å–∫–æ –º–Ω–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É üò´")
        discard await b.sendMessage(c.message.chat.id, "üç≥ –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É. –ù–∞–ø–∏—à–∏ –µ—ë –Ω–æ–º–µ—Ä.")
      else:
        let state = await redisClient.getState(c.message.chat.id)
        var content: string;
        case state:
        of usAskingGroup:
          content = "üçÜ –ü–æ–≥–æ–¥–∏, —è –ø–æ–∫–∞ –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã"
        of usChoosingGroup:
          content = "üôÑ –ì–¥–µ-—Ç–æ –≤—ã—à–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∞–º–∏. –í—ã–±–µ—Ä–∏ –∏–∑ —Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—É"
        of usMainMenu:
          content = "üçâ –•–≤–∞—Ç–∞–π –º–µ–Ω—é"

        if keyboards.hasKey(state):
          discard await b.sendMessage(c.message.chat.id, content, replyMarkup = keyboards[state])
        else:
          discard await b.sendMessage(c.message.chat.id, content)
        return true

    proc updateHandler(b: Telebot, u: Update): Future[bool] {.async, gcsafe.} =
      if u.callbackQuery.isSome:
        if u.callbackQuery.get().data.get().startsWith("selectgroup."):
          let
            uID = u.callbackQuery.get().fromUser.id
            gID = u.callbackQuery.get().data.get()["selectgroup.".len..^1]

          await redisClient.setGroup(uID, gID)
          await redisClient.setState(uID, usMainMenu)

          discard await b.sendMessage(
            u.callbackQuery.get().message.get().chat.id,
            "üíÄ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ " & (site.groups.filter do (x: Group) -> bool: x.id == gID)[0].display,
            replyMarkup = keyboards[usMainMenu]
          )
          return true
      if u.message.isSome and u.message.get().text.isSome and not u.message.get().text.get().startsWith('/'):
        let
          uID = u.message.get().chat.id
          uExists = await redisClient.stateExists(uID)
          content = u.message.get().text.get()

        if content.toLower().match(re"^–∏–¥–∏|–ø–æ—à(–µ|—ë)–ª –Ω–∞—Ö—É–π"): # @KrosBite
          discard await b.sendMessage(uID, "—Å–∞–º –∏–¥–∏")
          return true
        if not uExists:
          discard await b.sendMessage(uID, "ü§î –ß—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ –ø—Ä–∏–ø–æ–º–∏–Ω–∞—é. –ü—Ä–æ–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
          return true

        let state = await redisClient.getState(uID)
        case state:
        of usAskingGroup:
          let groups = site.groups.filter do (x: Group) -> bool: x.display.contains(content)
          if groups.len == 0:
            discard await b.sendMessage(uID, "üíÄ –¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—à–ª–∞—Å—å =(\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
            return true
          else:
            await redisClient.setState(uID, usChoosingGroup)
            discard await b.sendMessage(uID, "üë¢ –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É",
              replyMarkup = newInlineKeyboardMarkup(groups.map do (x: Group) -> InlineKeyboardButton:
                result = initInlineKeyboardButton(x.display)
                result.callbackData = some("selectgroup." & x.id)
              )
            )
            return true
        of usChoosingGroup:
          discard await b.sendMessage(uID, "üôÑ –ì–¥–µ-—Ç–æ –≤—ã—à–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∞–º–∏. –í—ã–±–µ—Ä–∏ –∏–∑ —Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—É")
        of usMainMenu:
          case content:
          of "–°–µ–≥–æ–¥–Ω—è":
            discard await b.sendMessage(uID, "–ù–µ—Ç –±–ª–∏–Ω –∑–∞–≤—Ç—Ä–∞")
          of "–ó–∞–≤—Ç—Ä–∞":
            discard await b.sendMessage(uID, "–ù–µ—Ç –±–ª–∏–Ω —Å–µ–≥–æ–¥–Ω—è")
          of "–ù–µ–¥–µ–ª—è":
            discard await b.sendMessage(uID, "–∂–æ—Å–∫–∞")
          of "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
            discard await b.sendMessage(uID, "–Ω–µ")

    bot.onCommand("start", startCommand)
    bot.onUpdate(updateHandler)
    bot.poll(timeout = 300)

  waitFor main()