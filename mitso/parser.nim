#[
  MITSO Parser - –ø–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ú–ò–¢–°–û
  Copyright (C) 2022 bit0r1n

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
]#

import std/[
  asyncdispatch, httpclient, net,
  htmlparser, xmltree, strtabs,
  uri, options, strformat,
  algorithm, sequtils, strutils,
  times, threadpool, json, nre
]
import private/[utils, constants], typedefs, helpers

proc loadPage*(site: Site): Future[string] {.async.} =
  ## –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∞–π—Ç–∞
  var client = newHttpClient(sslContext = newContext(verifyMode = CVerifyNone))

  debug "[loadPage]", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
  let response = client.requestWithRetry(SCHEDULE_BASE)

  debug "[loadPage]", "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"
  site.content = some response.body

  debug "[loadPage]", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–æ–≤"
  site.cookies = response.headers["Set-Cookie"]

  let
    doc = parseHtml(site.content.get)
    meta = doc.findAll("meta")
  for m in meta:
    if m.attrs.hasKey("name") and m.attrs["name"] == "csrf-token":
      debug "[loadPage]", "CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
      site.csrfToken = some m.attrs["content"]
      break

  if site.csrfToken.isNone:
    raise newException(ValueError, "CSRF token not found")

  return site.content.get

proc getFaculties*(site: Site): seq[SelectOption] =
  ## –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
  debug "[getFaculties]", "–ü–∞—Ä—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
  let html = parseHtml(site.content.get)
  site.faculties.setLen(0)
  for select in html.findAll("select"): # –ø—Ä–æ—Ö–æ–¥ –ø–æ –ø—É–Ω–∫—Ç–∞–º —Å–µ–ª–µ–∫—Ç–∞, –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if select.attrs.hasKey("id") and select.attrs["id"] == "faculty-id":
      for x in select.items:
        if x.kind == xnElement and x.attr("value") != "":
          let facult = (id: x.attr("value"), display: x.innerText)
          debug "[getFaculties]", "–ù–∞–π–¥–µ–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", $facult
          result.add(facult)
          site.faculties.add(facult)

proc threadParseCourse(site: Site, facult: string, form: string,
    course: string): seq[Group] =
  var client = newHttpClient(sslContext = newContext(verifyMode = CVerifyNone))
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
      "X-CSRF-Token": site.csrfToken.get, "Cookie": site.cookies.toFullString()})
  debug "[threadParseCourse]", fmt"–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø ({$course}, {$facult}, {$form})"
  let
    groupsRawJson = client.requestWithRetry(parseUri(SCHEDULE_GROUP), HttpPost,
      body = encodeQuery({
      "depdrop_parents[0]": facult,
      "depdrop_parents[1]": form,
      "depdrop_parents[2]": course,
      "depdrop_all_params[faculty-id]": facult,
      "depdrop_all_params[form-id]": form,
      "depdrop_all_params[course-id]": course
    }))
    groupsJson = parseJson(groupsRawJson.body)

  for groupElem in groupsJson["output"]:
    let group = Group(
      site: site,
      id: groupElem["id"].getStr(),
      display: groupElem["name"].getStr(),
      course: parseCourse(course),
      form: parseForm(form),
      faculty: parseFaculty(facult)
    )
    debug "[threadParseCourse]", "–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞", $group
    result.add(group)

proc threadParseForm(site: Site, facult: string, form: string): seq[Group] =
  var client = newHttpClient(sslContext = newContext(verifyMode = CVerifyNone))
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
      "X-CSRF-Token": site.csrfToken.get, "Cookie": site.cookies.toFullString()})
  debug "[threadParseForm]", fmt"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {$facult} ({$form})"
  var
    coursesRawJson = client.requestWithRetry(parseUri(SCHEDULE_COURSE),
        HttpPost,
      body = encodeQuery({
      "depdrop_parents[0]": facult,
      "depdrop_parents[1]": form,
      "depdrop_all_params[faculty-id]": facult,
      "depdrop_all_params[form-id]": form,
    }))
    coursesJson = parseJson(coursesRawJson.body)
    courses = newSeq[SelectOption]()

  # –ü–∞—Ä—Å –∫—É—Ä—Å–æ–≤ —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
  for course in coursesJson["output"].getElems():
    courses.add((id: course["id"].getStr, display: course["name"].getStr))

  # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫—É—Ä—Å–∞–º
  var groupsResponses = newSeq[FlowVar[seq[Group]]]()
  for course in courses.items:
    let groupsCourse = spawn threadParseCourse(site, facult, form, course.id)
    groupsResponses.add(groupsCourse)

  for response in groupsResponses:
    let groups = ^response
    for group in groups:
      result.add(group)

proc threadParseFaculty(site: Site, facult: string): seq[Group] =
  var client = newHttpClient(sslContext = newContext(verifyMode = CVerifyNone))
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
      "X-CSRF-Token": site.csrfToken.get, "Cookie": site.cookies.toFullString()})
  debug "[threadParseFaculty]", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞", $facult
  var
    formsRawJson = client.requestWithRetry(parseUri(SCHEDULE_FORMS), HttpPost,
      body = encodeQuery({"depdrop_parents[0]": facult,
          "depdrop_all_params[faculty-id]": facult}))
    formsJson = parseJson(formsRawJson.body)
    forms = newSeq[SelectOption]()

  # –ü–∞—Ä—Å —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è
  for form in formsJson["output"].getElems():
    let form = (form["id"].getStr(), form["name"].getStr())
    debug "[threadParseFaculty]", "–ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è", $form
    forms.add(form)

  # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ñ–æ—Ä–º–∞–º –æ–±—É—á–µ–Ω–∏—è
  var formsResponses = newSeq[FlowVar[seq[Group]]]()
  for form in forms.items:
    formsResponses.add(spawn threadParseForm(site, facult, form.id))
  for response in formsResponses:
    let groups = ^response
    for group in groups:
      result.add(group)

proc getGroups*(site: Site,
  form: seq[Form] = @[], course: seq[Course] = @[], faculty: seq[Faculty] = @[
      ]): Future[seq[Group]] {.async.} =
  # –ü–æ–ª—É—á–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã)

  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
  site.groups.setLen(0)

  var facultiesResponses = newSeq[FlowVar[seq[Group]]]()

  # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º
  for facult in site.faculties:
    facultiesResponses.add(spawn threadParseFaculty(site, facult.id))

  for groupsChunk in facultiesResponses:
    let res = ^groupsChunk
    for group in res:
      site.groups.add(group)

  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–ø–ø –ø–æ –∫—É—Ä—Å–∞–º/–Ω–æ–º–µ—Ä–∞–º
  debug "[getGroups]", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–ø–ø –ø–æ –∫—É—Ä—Å–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º"
  site.groups.sort do (x, y: Group) -> int:
    result = cmp(x.course, y.course)
    if result == 0:
      result = cmp(x.id, y.id)

  #[
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø
    –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—á–µ–º—É-—Ç–æ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≥—Ä—É–ø–ø—ã, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫—É—Ä—Å–∞—Ö.
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫—É—Ä—Å–∞
  ]#
  debug "[getGroups]", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø"
  site.groups = site.groups.filter do (x: Group) -> bool:
    if x.id == INVALID_GROUP_ID: # ???
      debug "[getGroups]", "omgomgüò± its fkin AUDITORIYA group, group of my dreams üòçü§©‚ô•"
      return false # üëé btw
    var simGroups = site.groups.filter do (y: Group) -> bool: result = y.id ==
        x.id and y.faculty == x.faculty
    if simGroups.len == 1:
      result = true
    else:
      debug "[getGroups]", "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–ø–ø", $simGroups
      simGroups.sort do (y, z: Group) -> int: result = cmp(y.course, z.course)
      return simGroups[^1] == x
  return site.groups

proc loadGroups*(site: Site): Future[Site] {.async.} =
  ## –•–µ–ª–ø–µ—Ä, –∑–∞–≥—Ä—É–∂–∞—é—â–∏–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω—É–ª—è
  debug "[loadGroups]", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
  discard await site.loadPage()
  debug "[loadGroups]", "–ü–∞—Ä—Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"
  discard site.getFaculties()
  debug "[loadGroups]", "–ü–∞—Ä—Å –≥—Ä—É–ø–ø"
  discard await site.getGroups()

  result = site

proc getWeeks*(group: Group): Future[seq[SelectOption]] {.async, gcsafe.} =
  ## –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã
  var client = newAsyncHttpClient(sslContext = newContext(
      verifyMode = CVerifyNone))
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
      "X-CSRF-Token": group.site.csrfToken.get,
      "Cookie": group.site.cookies.toFullString()})
  debug "[getWeeks]", "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã", $group
  let
    weeksRawJson = await client.requestWithRetry(parseUri(SCHEDULE_WEEK),
        HttpPost,
      body = encodeQuery({
      "depdrop_parents[0]": %group.faculty,
      "depdrop_parents[1]": %group.form,
      "depdrop_parents[2]": %group.course,
      "depdrop_parents[3]": group.id,
      "depdrop_all_params[faculty-id]": %group.faculty,
      "depdrop_all_params[form-id]": %group.form,
      "depdrop_all_params[course-id]": %group.course,
      "depdrop_all_params[group-id]": group.id,
    }))
    resp = await weeksRawJson.body()
    weeksJson = parseJson(resp)

  group.weeks.setLen(0)

  if (weeksJson["output"].len == 0):
    debug "[getWeeks]", "–ù–µ –Ω–∞—à–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è", $group
    group.weeks = @[]
    return group.weeks

  for week in weeksJson["output"]:
    let weekId = week["id"].getInt()
    group.weeks.add(($weekId, if weekId > 0: $(weekId + 1) &
        " –Ω–µ–¥–µ–ª—è" else: "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"))

  debug "[getWeeks]", "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã",
      $group, $group.weeks

  return group.weeks

proc getSchedule*(group: Group, week: string): Future[seq[
    ScheduleDay]] {.async.} =
  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
  var client = newAsyncHttpClient(sslContext = newContext(
      verifyMode = CVerifyNone))
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
      "X-CSRF-Token": group.site.csrfToken.get,
      "Cookie": group.site.cookies.toFullString()})
  debug "[getSchedule]", fmt"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {$group} –¥–ª—è {$week}"
  let
    sheldueRawHtml = await client.requestWithRetry(SCHEDULE_BASE, HttpPost,
      body = encodeQuery({
        "ScheduleSearch[fak]": %group.faculty,
        "ScheduleSearch[form]": %group.form,
        "ScheduleSearch[kurse]": %group.course,
        "ScheduleSearch[group_class]": group.id,
        "ScheduleSearch[week]": week,
      }))
    resp = await sheldueRawHtml.body()
    scheduleHtml = parseHtml(resp)

  for el in scheduleHtml.findAll("div"):
    if el.attr("class") != "container" and el.child("table") != nil: continue

    var lessons = newSeq[Lesson]()
    var day: ScheduleDay
    var eI = -1 # –∏–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞ –¥–Ω—è
    for item in el.items:
      if item.kind == xnElement:
        if item.tag == "h2": # –±–ª–æ–∫ –¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ - –¥–∞—Ç—ã
          eI += 1

          day = ScheduleDay()
          day.displayDate = item.innerText
          day.day = parseDay(eI)
          let
            scheduleDayMonth = parseMonth(item.innerText.split(" ")[1])
            dayTime = dateTime(
              now().year + (if scheduleDayMonth == mJan and now().month ==
                  mDec: 1 else: 0),
              scheduleDayMonth,
              parseInt(item.innerText.split(" ")[0]),
              zone = utc()
            )
          day.date = dayTime
          lessons.setLen(0)
        elif item.tag == "table": # —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–Ω—è—Ç–∏–π
          let trs = item.findAll("tr").filter do (x: XmlNode) -> bool: x.kind == xnElement
          for i, trDay in trs: # –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∑–∞–Ω—è—Ç–∏–π
            if trDay.kind != xnElement: continue
            if i == 0: continue # –∏–≥–Ω–æ—Ä –∏–∑ thead
            var lesson = Lesson()
            let tds = trDay.findAll("td").filter do (x: XmlNode) ->
                bool: x.kind == xnElement
            if tds[1].innerText.contains("(–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π)") or tds[
                1].innerText.replace("\n", " ").match(
                re"^\d\. -$").isSome: continue # –∏–≥–Ω–æ—Ä –ª–∞–±/–ø—Ä–∞–∫ –¥–ª—è –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏

            var
              ls = parseLessonName(tds[1].innerText.replace("\n", " "))
              classrooms = if tds[2].innerText.len > 0: parseClassrooms(tds[
                  2].innerText) else: @[]
              time: LessonTime

            try:
              time = parseTime(tds[0].innerText) # =))
            except ValueError:
              continue

            if day.lessons.len != 0 and ls.lessonName == day.lessons[
                ^1].name and
              ls.lessonType == day.lessons[^1].lType and time == day.lessons[
                  ^1].lessonTime: # –∑–∞–Ω—è—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ –≥—Ä—É–ø–ø—ã
              for classroom in classrooms:
                if classroom notin day.lessons[^1].classrooms:
                  day.lessons[^1].classrooms.add(classroom)
              if ls.teacher notin INVALID_TEACHERS and ls.teacher notin day.lessons[^1].teachers:
                day.lessons[^1].teachers.add(ls.teacher)
            else:
              lesson.name = ls.lessonName
              lesson.lType = ls.lessonType
              if ls.teacher notin INVALID_TEACHERS: lesson.teachers.add(ls.teacher)
              if classrooms.len > 0: lesson.classrooms.add(
                  classrooms)
              lesson.lessonTime = time

              var lessonDate = day.date
              lessonDate += initDuration(hours = ($%lesson.lessonTime).hours -
                  3, minutes = ($%lesson.lessonTime).minutes)

              lesson.date = lessonDate

              day.lessons.add(lesson)
          if day.lessons.len > 0: result.add(day)

proc getSchedule*(group: Group, week: SelectOption): Future[seq[
    ScheduleDay]] {.async.} =
  result = await group.getSchedule(week.id)
